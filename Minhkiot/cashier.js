
// Import c√°c h√†m t·ª´ Firebase CDN
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js";
import { 
    getFirestore, collection, onSnapshot, doc, updateDoc, query, where 
} from "https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js";

// C·∫•u h√¨nh Firebase c·ªßa b·∫°n
const firebaseConfig = {
    apiKey: "AIzaSyCh1zPuWrZ6g3UHQPJeahp--96vHoiRB-k",
    authDomain: "minhkiot-7f5d6.firebaseapp.com",
    projectId: "minhkiot-7f5d6",
    storageBucket: "minhkiot-7f5d6.firebasestorage.app",
    messagingSenderId: "25045319035",
    appId: "1:25045319035:web:30e7e5d07dc3a75c8411de",
    measurementId: "G-FZHVBC1NFG"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const orderList = document.getElementById('orderList');
const mainApp = document.getElementById('mainApp');

// T·∫°o modal x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng
function createConfirmModal() {
    const modalHTML = `
        <div id="confirmModal" class="modal-overlay">
            <div class="modal-content">
                <h2>X√°c nh·∫≠n ho√†n th√†nh</h2>
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√°nh d·∫•u ƒë∆°n h√†ng n√†y l√† ƒë√£ ho√†n th√†nh?</p>
                <div class="modal-buttons">
                    <button id="confirmYes" class="modal-btn confirm-btn">C√≥</button>
                    <button id="confirmNo" class="modal-btn cancel-btn">Kh√¥ng</button>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // G√°n s·ª± ki·ªán cho c√°c n√∫t trong modal
    document.getElementById('confirmYes').addEventListener('click', handleConfirmYes);
    document.getElementById('confirmNo').addEventListener('click', handleConfirmNo);
    document.getElementById('confirmModal').addEventListener('click', handleModalClick);
}

// T·∫°o th√¥ng b√°o
function createNotification() {
    const notificationHTML = `
        <div id="notification" class="notification">
            <p>üîî C√≥ ƒë∆°n h√†ng m·ªõi!</p>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', notificationHTML);
}

// Hi·ªÉn th·ªã modal x√°c nh·∫≠n
function showConfirmModal(orderId) {
    currentOrderId = orderId;
    const modal = document.getElementById('confirmModal');
    modal.style.display = 'flex';
}

// ·∫®n modal x√°c nh·∫≠n
function hideConfirmModal() {
    const modal = document.getElementById('confirmModal');
    if (modal) {
        modal.style.display = 'none';
    }
    currentOrderId = null;
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification() {
    const notification = document.getElementById('notification');
    if (notification) {
        notification.classList.add('show', 'new-order');
        
        // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t C√≥
function handleConfirmYes() {
    if (currentOrderId) {
        completeOrder(currentOrderId);
        hideConfirmModal();
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t Kh√¥ng
function handleConfirmNo() {
    hideConfirmModal();
}

// X·ª≠ l√Ω s·ª± ki·ªán click v√†o overlay
function handleModalClick(e) {
    if (e.target.id === 'confirmModal') {
        hideConfirmModal();
    }
}

// Bi·∫øn l∆∞u tr·ªØ orderId ƒëang ƒë∆∞·ª£c x√°c nh·∫≠n
let currentOrderId = null;
let previousOrderCount = 0;

// L·∫Øng nghe ƒë∆°n h√†ng t·ª´ Firestore
listenForOrders();

function listenForOrders() {
    console.log("B·∫Øt ƒë·∫ßu l·∫Øng nghe ƒë∆°n h√†ng...");
    
    // T·∫°o modal v√† th√¥ng b√°o n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!document.getElementById('confirmModal')) {
        createConfirmModal();
    }
    if (!document.getElementById('notification')) {
        createNotification();
    }
    
    // T·∫°o m·ªôt truy v·∫•n: ch·ªâ l·∫•y c√°c ƒë∆°n h√†ng c√≥ status l√† "pending"
    const q = query(collection(db, "orders"), where("status", "==", "pending"));

    // onSnapshot l√† m·ªôt b·ªô l·∫Øng nghe theo th·ªùi gian th·ª±c
    onSnapshot(q, (snapshot) => {
        orderList.innerHTML = ''; // X√≥a danh s√°ch c≈©
        
        if (snapshot.empty) {
            orderList.innerHTML = '<p>Kh√¥ng c√≥ ƒë∆°n h√†ng m·ªõi n√†o.</p>';
            previousOrderCount = 0;
            return;
        }

        const currentOrderCount = snapshot.docs.length;
        
        // Ki·ªÉm tra n·∫øu c√≥ ƒë∆°n h√†ng m·ªõi
        if (currentOrderCount > previousOrderCount) {
            showNotification();
        }
        
        previousOrderCount = currentOrderCount;

        // S·∫Øp x·∫øp c√°c ƒë∆°n h√†ng, ƒë∆°n m·ªõi nh·∫•t l√™n tr∆∞·ªõc
        const sortedDocs = snapshot.docs.sort((a, b) => {
            const timeA = a.data().createdAt?.toDate() || 0;
            const timeB = b.data().createdAt?.toDate() || 0;
            return timeB - timeA; // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
        });

        // L·∫∑p qua t·ª´ng t√†i li·ªáu (ƒë∆°n h√†ng) ƒë√£ s·∫Øp x·∫øp
        sortedDocs.forEach(doc => {
            const order = doc.data();
            const orderId = doc.id;
            
            // T·∫°o th·∫ª HTML cho ƒë∆°n h√†ng
            const orderElement = document.createElement('div');
            orderElement.className = 'order-card';
            
            // ƒê·ªãnh d·∫°ng th·ªùi gian (n·∫øu c√≥)
            let time = 'Kh√¥ng r√µ';
            if (order.createdAt && order.createdAt.toDate) {
                time = order.createdAt.toDate().toLocaleTimeString('vi-VN');
            }

            // Hi·ªÉn th·ªã c√°c m√≥n h√†ng
            let itemsHtml = order.items.map(item => `
                <li>
                    ${item.quantity}x ${item.name.vi} (${item.price.toLocaleString()}‚Ç¨)
                    ${item.note ? `<br><i>Ghi ch√∫: ${item.note}</i>` : ''}
                </li>
            `).join('');

            // ƒê·ªï d·ªØ li·ªáu v√†o th·∫ª HTML
            orderElement.innerHTML = `
                <h3>${order.tableNumber} - L√∫c: ${time}</h3>
                <p>T·ªïng ti·ªÅn: <strong>${order.total.toLocaleString()}‚Ç¨</strong></p>
                <p>Thanh to√°n: ${order.paymentMethod}</p>
                <ul>${itemsHtml}</ul>
                <button class="complete-btn" data-id="${orderId}">Ho√†n th√†nh</button>
            `;
            
            orderList.appendChild(orderElement);
        });

        // G√°n s·ª± ki·ªán click cho c√°c n√∫t "Ho√†n th√†nh"
        document.querySelectorAll('.complete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const id = e.target.dataset.id;
                showConfirmModal(id);
            });
        });

    }, (error) => {
        console.error("L·ªói khi l·∫Øng nghe ƒë∆°n h√†ng:", error);
        if (error.code === 'permission-denied') {
            orderList.innerHTML = '<p style="color: red; font-size: 20px;">L·ªñI B·∫¢O M·∫¨T: B·∫°n kh√¥ng c√≥ quy·ªÅn xem d·ªØ li·ªáu. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒëƒÉng nh·∫≠p Firebase tr∆∞·ªõc khi v√†o trang n√†y.</p>';
        }
    });
}

// H√†m ho√†n th√†nh ƒë∆°n h√†ng
async function completeOrder(orderId) {
    console.log("Ho√†n th√†nh ƒë∆°n h√†ng:", orderId);
    const orderRef = doc(db, "orders", orderId);
    
    try {
        // C·∫≠p nh·∫≠t tr∆∞·ªùng "status" th√†nh "completed"
        await updateDoc(orderRef, {
            status: "completed"
        });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    }
}