
// Import c√°c h√†m t·ª´ Firebase CDN
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.0.0/firebase-app.js";
import { 
    getFirestore, collection, onSnapshot, doc, updateDoc, query, where, getDocs, addDoc
} from "https://www.gstatic.com/firebasejs/10.0.0/firebase-firestore.js";

// ===== B·∫ÆT ƒê·∫¶U CODE M·ªöI =====

// Bi·∫øn ƒë·ªÉ l∆∞u API key
let GOOGLE_TRANSLATE_API_KEY = "";

// H√†m l·∫•y API key t·ª´ Firestore
async function getApiKeyFromFirestore() {
    try {
        const apiKeysRef = collection(db, "api_keys");
        const snapshot = await getDocs(apiKeysRef);
        
        if (snapshot.empty) {
            // N·∫øu collection ch∆∞a t·ªìn t·∫°i, t·∫°o document m·∫´u
            await addDoc(apiKeysRef, {
                service: "google_translate",
                apiKey: "YOUR_API_KEY_HERE",
                createdAt: new Date()
            });
            console.log("ƒê√£ t·∫°o collection 'api_keys' v·ªõi document m·∫´u");
            return "YOUR_API_KEY_HERE";
        } else {
            // L·∫•y API key ƒë·∫ßu ti√™n (ho·∫∑c b·∫°n c√≥ th·ªÉ t√¨m theo service)
            const firstDoc = snapshot.docs[0];
            return firstDoc.data().apiKey || "";
        }
    } catch (error) {
        console.error("L·ªói khi l·∫•y API key t·ª´ Firestore:", error);
        return "";
    }
}

/**
 * H√†m g·ªçi Google Cloud Translation API ƒë·ªÉ d·ªãch vƒÉn b·∫£n
 * @param {string} text - VƒÉn b·∫£n c·∫ßn d·ªãch
 * @param {string} sourceLanguage - Ng√¥n ng·ªØ g·ªëc (v√≠ d·ª•: 'en', 'fi')
 * @param {string} targetLanguage - Ng√¥n ng·ªØ ƒë√≠ch (m·∫∑c ƒë·ªãnh 'vi')
 */
async function translateWithGoogle(text, sourceLanguage, targetLanguage = 'vi') {
    if (!text || !text.trim()) return text;
    
    // N·∫øu ng√¥n ng·ªØ g·ªëc ƒë√£ l√† ti·∫øng Vi·ªát th√¨ kh√¥ng c·∫ßn d·ªãch
    if (sourceLanguage === targetLanguage) return text;

    // N·∫øu ch∆∞a c√≥ API key, l·∫•y t·ª´ Firestore
    if (!GOOGLE_TRANSLATE_API_KEY) {
        GOOGLE_TRANSLATE_API_KEY = await getApiKeyFromFirestore();
    }

    try {
        const response = await fetch(`https://translation.googleapis.com/language/translate/v2?key=${GOOGLE_TRANSLATE_API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                q: text,
                source: sourceLanguage,
                target: targetLanguage,
                format: 'text'
            })
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        const data = await response.json();
        return data.data.translations[0].translatedText;
    } catch (error) {
        console.error('L·ªói d·ªãch thu·∫≠t v·ªõi Google Translate:', error);
        return `${text} (L·ªói d·ªãch)`; // Tr·∫£ v·ªÅ text g·ªëc n·∫øu l·ªói
    }
}

// H√†m ƒë·∫£m b·∫£o collection "orders" t·ªìn t·∫°i
async function ensureOrdersCollectionExists() {
    try {
        const ordersRef = collection(db, "orders");
        const q = query(ordersRef, where("status", "==", "pending"));
        const snapshot = await getDocs(q);

        if (snapshot.empty) {
            // Th√™m m·ªôt document m·∫´u ƒë·ªÉ t·∫°o collection
            await addDoc(ordersRef, {
                tableNumber: "Ki·ªÉm tra",
                total: 0,
                paymentMethod: "test",
                status: "completed", // ƒê·∫∑t l√† completed ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã
                items: [],
                createdAt: new Date(),
                language: "vi"
            });
            console.log("ƒê√£ t·∫°o collection 'orders' ƒë·ªÉ ƒë·∫£m b·∫£o t·ªìn t·∫°i.");
        }
    } catch (error) {
        console.error("L·ªói khi ƒë·∫£m b·∫£o collection t·ªìn t·∫°i:", error);
    }
}
// ===== K·∫æT TH√öC CODE M·ªöI =====

// C·∫•u h√¨nh Firebase c·ªßa b·∫°n
const firebaseConfig = {
    apiKey: "AIzaSyCh1zPuWrZ6g3UHQPJeahp--96vHoiRB-k",
    authDomain: "minhkiot-7f5d6.firebaseapp.com",
    projectId: "minhkiot-7f5d6",
    storageBucket: "minhkiot-7f5d6.firebasestorage.app",
    messagingSenderId: "25045319035",
    appId: "1:25045319035:web:30e7e5d07dc3a75c8411de",
    measurementId: "G-FZHVBC1NFG"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// L·∫•y API key khi kh·ªüi ƒë·ªông
getApiKeyFromFirestore().then(key => {
    GOOGLE_TRANSLATE_API_KEY = key;
    console.log("ƒê√£ t·∫£i API key t·ª´ Firestore");
});

// ƒê·∫£m b·∫£o collection t·ªìn t·∫°i
ensureOrdersCollectionExists();

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM
const orderList = document.getElementById('orderList');
const mainApp = document.getElementById('mainApp');

// ===== H√ÄM HELPER CHO LOADING =====

// H√†m ƒë·ªÉ HI·ªÜN logo loading
function showLoading() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.classList.remove('hidden');
    }
}

// H√†m ƒë·ªÉ ·∫®N logo loading
function hideLoading() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.classList.add('hidden');
    }
}

// H√†m delay ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ nh·∫π
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
// ===================================

// T·∫°o modal x√°c nh·∫≠n ho√†n th√†nh ƒë∆°n h√†ng
function createConfirmModal() {
    const modalHTML = `
        <div id="confirmModal" class="modal-overlay">
            <div class="modal-content">
                <h2>X√°c nh·∫≠n ho√†n th√†nh</h2>
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë√°nh d·∫•u ƒë∆°n h√†ng n√†y l√† ƒë√£ ho√†n th√†nh?</p>
                <div class="modal-buttons">
                    <button id="confirmYes" class="modal-btn confirm-btn">C√≥</button>
                    <button id="confirmNo" class="modal-btn cancel-btn">Kh√¥ng</button>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // G√°n s·ª± ki·ªán cho c√°c n√∫t trong modal
    document.getElementById('confirmYes').addEventListener('click', handleConfirmYes);
    document.getElementById('confirmNo').addEventListener('click', handleConfirmNo);
    document.getElementById('confirmModal').addEventListener('click', handleModalClick);
}

// T·∫°o th√¥ng b√°o
function createNotification() {
    const notificationHTML = `
        <div id="notification" class="notification">
            <p>üîî C√≥ ƒë∆°n h√†ng m·ªõi!</p>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', notificationHTML);
}

// Hi·ªÉn th·ªã modal x√°c nh·∫≠n
function showConfirmModal(orderId) {
    currentOrderId = orderId;
    const modal = document.getElementById('confirmModal');
    modal.style.display = 'flex';
}

// ·∫®n modal x√°c nh·∫≠n
function hideConfirmModal() {
    const modal = document.getElementById('confirmModal');
    if (modal) {
        modal.style.display = 'none';
    }
    currentOrderId = null;
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification() {
    const notification = document.getElementById('notification');
    if (notification) {
        notification.classList.add('show', 'new-order');
        
        // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t C√≥
function handleConfirmYes() {
    if (currentOrderId) {
        showLoading(); // Hi·ªÉn th·ªã loading khi x√°c nh·∫≠n ho√†n th√†nh
        setTimeout(() => {
            completeOrder(currentOrderId);
            hideConfirmModal();
            hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
        }, 200); // ƒê·ªô tr·ªÖ nh·∫π 200ms
    }
}

// X·ª≠ l√Ω s·ª± ki·ªán click n√∫t Kh√¥ng
function handleConfirmNo() {
    showLoading(); // Hi·ªÉn th·ªã loading khi h·ªßy
    setTimeout(() => {
        hideConfirmModal();
        hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
    }, 150); // ƒê·ªô tr·ªÖ nh·∫π 150ms
}

// X·ª≠ l√Ω s·ª± ki·ªán click v√†o overlay
function handleModalClick(e) {
    if (e.target.id === 'confirmModal') {
        showLoading(); // Hi·ªÉn th·ªã loading khi click overlay
        setTimeout(() => {
            hideConfirmModal();
            hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
        }, 150); // ƒê·ªô tr·ªÖ nh·∫π 150ms
    }
}

// Bi·∫øn l∆∞u tr·ªØ orderId ƒëang ƒë∆∞·ª£c x√°c nh·∫≠n
let currentOrderId = null;
let previousOrderCount = 0;

// L·∫Øng nghe ƒë∆°n h√†ng t·ª´ Firestore
listenForOrders();

// == L·∫ÆNG NGHE ƒê∆†N H√ÄNG T·ª™ FIRESTORE (PHI√äN B·∫¢N C√ì D·ªäCH T·ª∞ ƒê·ªòNG) ==
async function listenForOrders() {
    console.log("B·∫Øt ƒë·∫ßu l·∫Øng nghe ƒë∆°n h√†ng...");
    
    // T·∫°o modal v√† th√¥ng b√°o n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!document.getElementById('confirmModal')) {
        createConfirmModal();
    }
    if (!document.getElementById('notification')) {
        createNotification();
    }
    
    // T·∫°o m·ªôt truy v·∫•n: ch·ªâ l·∫•y c√°c ƒë∆°n h√†ng c√≥ status l√† "pending"
    const q = query(collection(db, "orders"), where("status", "==", "pending"));

    // onSnapshot l√† m·ªôt b·ªô l·∫Øng nghe theo th·ªùi gian th·ª±c
    onSnapshot(q, async (snapshot) => {
        showLoading(); // Hi·ªÉn th·ªã loading khi c·∫≠p nh·∫≠t danh s√°ch ƒë∆°n h√†ng
        
        orderList.innerHTML = ''; // X√≥a danh s√°ch c≈©
        
        if (snapshot.empty) {
            orderList.innerHTML = '<p>Kh√¥ng c√≥ ƒë∆°n h√†ng m·ªõi n√†o.</p>';
            previousOrderCount = 0;
            setTimeout(() => {
                hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
            }, 150); // ƒê·ªô tr·ªÖ nh·∫π 150ms
            return;
        }

        const currentOrderCount = snapshot.docs.length;
        
        // Ki·ªÉm tra n·∫øu c√≥ ƒë∆°n h√†ng m·ªõi
        if (currentOrderCount > previousOrderCount) {
            showNotification();
        }
        
        previousOrderCount = currentOrderCount;

        // S·∫Øp x·∫øp c√°c ƒë∆°n h√†ng, ƒë∆°n m·ªõi nh·∫•t l√™n tr∆∞·ªõc
        const sortedDocs = snapshot.docs.sort((a, b) => {
            const timeA = a.data().createdAt?.toDate() || 0;
            const timeB = b.data().createdAt?.toDate() || 0;
            return timeB - timeA; // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
        });

        // L·∫∑p qua t·ª´ng t√†i li·ªáu (ƒë∆°n h√†ng) ƒë√£ s·∫Øp x·∫øp
        for (const doc of sortedDocs) {
            const order = doc.data();
            const orderId = doc.id;
            
            // ===== B·∫ÆT ƒê·∫¶U LOGIC D·ªäCH =====
            // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i ti·∫øng n∆∞·ªõc ngo√†i V√Ä c√≥ ghi ch√∫ kh√¥ng
            if (order.language && order.language !== 'vi' && order.items.some(item => item.note)) {
                
                // D√πng Promise.all ƒë·ªÉ d·ªãch t·∫•t c·∫£ ghi ch√∫ c·ªßa ƒë∆°n h√†ng n√†y c√πng l√∫c
                await Promise.all(order.items.map(async (item) => {
                    if (item.note) {
                        // G·ªçi h√†m d·ªãch Google
                        const translatedNote = await translateWithGoogle(item.note, order.language, 'vi');
                        // Ghi ƒë√® ghi ch√∫ b·∫±ng b·∫£n d·ªãch
                        item.note = `${translatedNote} (<i>D·ªãch t·ª´ ${order.language}</i>)`;
                    }
                }));
            }
            // ===== K·∫æT TH√öC LOGIC D·ªäCH =====

            // T·∫°o th·∫ª HTML cho ƒë∆°n h√†ng (v·ªõi ghi ch√∫ ƒë√£ ƒë∆∞·ª£c d·ªãch)
            const orderElement = document.createElement('div');
            orderElement.className = 'order-card'; // Class m·∫∑c ƒë·ªãnh
            
            // ===== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA TH·ªúI GIAN CH·ªú =====
            if (order.createdAt && order.createdAt.toDate) {
                const orderTime = order.createdAt.toDate().getTime(); // Th·ªùi gian t·∫°o ƒë∆°n (milliseconds)
                const currentTime = Date.now(); // Th·ªùi gian hi·ªán t·∫°i (milliseconds)
                const minutesWaiting = (currentTime - orderTime) / (1000 * 60); // S·ªë ph√∫t ƒë√£ ch·ªù

                if (minutesWaiting > 10) { 
                    orderElement.classList.add('urgent'); // Th√™m class "kh·∫©n c·∫•p" n·∫øu > 10 ph√∫t
                } else if (minutesWaiting > 5) {
                    orderElement.classList.add('warning'); // Th√™m class "c·∫£nh b√°o" n·∫øu > 5 ph√∫t
                }
            }
            // ===== K·∫æT TH√öC KI·ªÇM TRA TH·ªúI GIAN CH·ªú =====

            // ƒê·ªãnh d·∫°ng th·ªùi gian (n·∫øu c√≥)
            let time = 'Kh√¥ng r√µ';
            if (order.createdAt && order.createdAt.toDate) {
                time = order.createdAt.toDate().toLocaleTimeString('vi-VN');
            }

            // Hi·ªÉn th·ªã c√°c m√≥n h√†ng - ƒê√É C·∫¨P NH·∫¨T ƒê·ªÇ HI·ªÇN TH·ªä SIZE
            let itemsHtml = order.items.map(item => {
                // T·∫°o chu·ªói hi·ªÉn th·ªã size n·∫øu c√≥
                const sizeDisplay = item.size ? ` - Size: ${item.size}` : '';
                return `
                    <li>
                        ${item.quantity}x ${item.name.vi}${sizeDisplay} (${item.price.toLocaleString()}‚Ç¨)
                        ${item.note ? `<br><i class="note-translated">Ghi ch√∫: ${item.note}</i>` : ''}
                    </li>
                `;
            }).join('');

            // ƒê·ªï d·ªØ li·ªáu v√†o th·∫ª HTML
            orderElement.innerHTML = `
                <h3>${order.tableNumber} - L√∫c: ${time}</h3>
                <p>T·ªïng ti·ªÅn: <strong>${order.total.toLocaleString()}‚Ç¨</strong></p>
                <p>Thanh to√°n: ${order.paymentMethod}</p>
                <ul>${itemsHtml}</ul>
                <button class="complete-btn" data-id="${orderId}">Ho√†n th√†nh</button>
            `;
            
            orderList.appendChild(orderElement);
        }

        // G√°n s·ª± ki·ªán click cho c√°c n√∫t "Ho√†n th√†nh"
        document.querySelectorAll('.complete-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const id = e.target.dataset.id;
                showLoading(); // Hi·ªÉn th·ªã loading khi click n√∫t ho√†n th√†nh
                setTimeout(() => {
                    showConfirmModal(id);
                    hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
                }, 150); // ƒê·ªô tr·ªÖ nh·∫π 150ms
            });
        });

        setTimeout(() => {
            hideLoading(); // ·∫®n loading sau khi ho√†n th√†nh
        }, 200); // ƒê·ªô tr·ªÖ nh·∫π 200ms

    }, (error) => {
        console.error("L·ªói khi l·∫Øng nghe ƒë∆°n h√†ng:", error);
        hideLoading(); // ·∫®n loading khi c√≥ l·ªói
        if (error.code === 'permission-denied') {
            orderList.innerHTML = '<p style="color: red; font-size: 20px;">L·ªñI B·∫¢O M·∫¨T: B·∫°n kh√¥ng c√≥ quy·ªÅn xem d·ªØ li·ªáu. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒëƒÉng nh·∫≠p Firebase tr∆∞·ªõc khi v√†o trang n√†y.</p>';
        }
    });
}

// H√†m ho√†n th√†nh ƒë∆°n h√†ng
async function completeOrder(orderId) {
    console.log("Ho√†n th√†nh ƒë∆°n h√†ng:", orderId);
    const orderRef = doc(db, "orders", orderId);
    
    try {
        // C·∫≠p nh·∫≠t tr∆∞·ªùng "status" th√†nh "completed"
        await updateDoc(orderRef, {
            status: "completed"
        });
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    }
}

// ===== TH√äM V√ÄO CU·ªêI FILE .JS =====
// ·∫®n m√†n h√¨nh loading khi trang t·∫£i xong
window.addEventListener('load', function() {
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        // Th√™m tr·ªÖ 200ms ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi th·ª© ƒë·∫πp m·∫Øt
        setTimeout(() => {
            loadingOverlay.classList.add('hidden');
        }, 200); 
    }
});
// ===================================